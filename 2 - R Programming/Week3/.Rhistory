test = 1:10
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(test)
cachemean(makeVector(test))
mean(test)
test2 <- makeVector(test)
test2
test$getmean()
test2$getmean()
test2$get()
mean(1:10,...)
mean(test2$get(), ...)
test2$set
test2$set()
test2$set(1:3)
x
test2
search()
base
lm
base
search()
filter
search()
make.power <- function(n){
pow <- function(n) {
n^n
}
pow
}
make.power()
test = make.power()
test(2)
test(3)
test = make.power(4)
test(2)
test(3)
make.power <- function(n){
pow <- function(n) {
x^n
}
pow
}
test = make.power(2)
test(2)
make.power <- function(n){
pow <- function(x) {
x^n
}
pow
}
square = make.power(2)
environment(square)
ls(environment(square))
?get
a = list()
envir(a)
environment(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
environment(makeVector)
environment(set)
t <- makeVector(1:10)
environment(t$set)
environment(t$get)
ls(environment(t$set))
get("x",environment(t$get))
t$set
t$set(1:5)
get("x",environment(t$get))
t$set(1:10)
t <- makeVector(1:10)
f1 <- function (x) {
mean(x)
}
f1(c(1,2,NA))
f2 <- function (x,...) {
mean(x,...)
}
f2(c(1,2,NA))
f2(c(1,2,NA),na.rm=1)
f1(c(1,2,NA),na.rm=1)
t2 <- makeVector(1:20)
environment(t2$set)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
t2 <- makeVector(1:20)
environment(t2$set)
t <- makeVector(1:10)
environment(t$set)
t3 <- makeVector(1:30)
t3 <- makeVector(1:20)
environment(t3$set)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
t <- makeVector(1:10)
environment(t$set)
environment(t$get)
ls(environment(t$set))
get("x",environment(t$get))
e1 = environment(t$set)
cachemean(t)
get("m",e1)
t2 <- makeVector(1:10)
environment(t2$set)
cachemean(t)
cachemean(t2)
cachemean(makeVector(1:10))
cachemean(makeVector(1:10))
cachemean(makeVector(1:10))
cachemean(t2)
matrix()
makeCacheMatrix <- function (x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(inv) inverse <<- inv
getInverse <- function() inverse
list(set,get,setInverse,getInverse)
}
m = matrix(1:9,3,3)
makeCacheMatrix(m)
t = makeCacheMatrix(m)
t$get()
makeCacheMatrix <- function (x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(inv) inverse <<- inv
getInverse <- function() inverse
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
m = matrix(1:9,3,3)
t = makeCacheMatrix(m)
t$get()
cacheSolve <- function(t) {
inverse <- t$getInverse();
if(!is.null(inverse)) {
print("Cache found and loading");
return(inverse)
}
data <- t$get();
inverse <- solve(data);
t$setInverse(inverse);
inverse
}
cacheSolve(t)
?solve
randint(9)
runif(9)
m = matrix(runif(9),3,3)
t = makeCacheMatrix(m)
cacheSolve <- function(t,...) {
inverse <- t$getInverse();
if(!is.null(inverse)) {
print("Cache found and loading");
return(inverse)
}
data <- t$get();
inverse <- solve(data,...);
t$setInverse(inverse);
inverse
}
cacheSolve(t)
cacheSolve(t)
cacheSolve <- function(t,...) {
inverse <- t$getInverse();
if(!is.null(inverse)) {
message("Cache found and loading");
return(inverse)
}
data <- t$get();
inverse <- solve(data,...);
t$setInverse(inverse);
inverse
}
cacheSolve(t)
m = matrix(runif(16),2,8)
t = makeCacheMatrix(m)
cacheSolve(t)
makeCacheMatrix <- function (x = matrix()) {
if(!is.matrix(x)) {
stop("input is not a matrix!")
}
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(inv) inverse <<- inv
getInverse <- function() inverse
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
makeCacheMatrix <- function (x = matrix()) {
if(!is.matrix(x)) {
stop("input is not a matrix!")
}
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(inv) inverse <<- inv
getInverse <- function() inverse
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
m = 1:10
makeCacheMatrix <- function (x = matrix()) {
if(!is.matrix(x)) {
stop("input is not a matrix!")
}
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(inv) inverse <<- inv
getInverse <- function() inverse
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
t = makeCacheMatrix(m)
m = matrix(runif(16),2,8)
makeCacheMatrix <- function (x = matrix()) {
# check if matrix
if(!is.matrix(x)) {
stop("input is not a matrix!")
}
# check if square matrix
if(nrow(x)!=ncol(x)) {
stop("please input a square matrix!")
}
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(inv) inverse <<- inv
getInverse <- function() inverse
# output
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
t = makeCacheMatrix(m)
m = matrix(runif(16),4,4)
t = makeCacheMatrix(m)
cacheSolve <- function(t,...) {
inverse <- t$getInverse();
if(!is.null(inverse)) {
message("Cache found and loading");
return(inverse)
}
data <- t$get();
inverse <- solve(data,...);
t$setInverse(inverse);
inverse
}
t = makeCacheMatrix(m)
cacheSolve(t)
cacheSolve(t)
cacheSolve(t)
cacheSolve <- function(t,...) {
inverse <- t$getInverse();
if(!is.null(inverse)) {
message("Cache found and loading");
return(inverse)
}
data <- t$get();
inverse <- solve(data,...);
t$setInverse(inverse);
inverse
message("cache saved")
}
cacheSolve(t)
m = matrix(runif(16),4,4)
t = makeCacheMatrix(m)
cacheSolve(t)
cacheSolve <- function(t,...) {
inverse <- t$getInverse();
if(!is.null(inverse)) {
message("Cache found and loading");
return(inverse)
}
data <- t$get();
inverse <- solve(data,...);
t$setInverse(inverse);
message("cache saved")
return(inverse)
}
m = matrix(runif(16),4,4)
t = makeCacheMatrix(m)
cacheSolve(t)
cacheSolve <- function(t,...) {
inverse <- t$getInverse();
if(!is.null(inverse)) {
message("Cache found and loading");
return(inverse)
}
data <- t$get();
inverse <- solve(data,...);
t$setInverse(inverse);
message("saving the following data as cache")
return(inverse)
}
m = matrix(runif(16),4,4)
t = makeCacheMatrix(m)
cacheSolve(t)
cacheSolve(t)
m = matrix(runif(16),4,4)
t = makeCacheMatrix(m)
cacheSolve(t)
t = makeCacheMatrix(m)
cacheSolve(t)
t = makeCacheMatrix(m)
cacheSolve(t)
m = 1:10
t = makeCacheMatrix(m)
